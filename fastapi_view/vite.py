import os
import ujson
from typing import List
from jinja2 import Environment


class _Vite(object):
    """Vite helping function for Jinja2"""

    # development or production mode.
    VITE_DEV_MODE: bool = False

    # Vite dev server protocol (http / https)
    VITE_DEV_SERVER_PROTOCOL: str = "http"

    # Vite dev server hostname.
    VITE_DEV_SERVER_HOST: str = "localhost"

    # Vite dev server port.
    VITE_DEV_SERVER_PORT: int = 5173

    VITE_DEV_SERVER_URL = "{protocol}://{server_host}:{server_port}".format(
        protocol=VITE_DEV_SERVER_PROTOCOL,
        server_host=VITE_DEV_SERVER_HOST,
        server_port=VITE_DEV_SERVER_PORT,
    )

    # Vite dev server path to hot module replacement.
    VITE_WS_CLIENT_PATH: str = "@vite/client"

    # Path to vite compiled assets (only used in production mode).
    VITE_ASSETS_PATH: str = None

    # Vite static asset url
    VITE_STATIC_URL: str = None

    # Path to your manifest file generated by Vite.
    VITE_MANIFEST_PATH: str = "{root}/dist/manifest.json".format(
        root=os.path.abspath("")
    )

    def __init__(self):
        # self = _ViteSettings()
        self._manifest = None

    def vite_hmr_client(self):
        return (
            self.__script_tag(
                src=f"{self.VITE_DEV_SERVER_URL}/{self.VITE_WS_CLIENT_PATH}",
                attrs={"type": "module"},
            )
            if self.VITE_DEV_MODE
            else ""
        )

    def vite_asset(self, asset_path: str):
        if self.VITE_DEV_MODE:
            return self.__script_tag(
                src=f"{self.VITE_DEV_SERVER_URL}/{asset_path}",
                attrs={"type": "module"},
            )

        asset_tags = []

        with open(self.VITE_MANIFEST_PATH, "r") as file:
            # manifest_content = file.read()
            self._manifest = ujson.load(file)

        asset_tags.extend(self.__css_assets_handle(asset_path, []))

        file_path = self._manifest[asset_path]["file"]

        src = (
            f"{self.VITE_STATIC_URL}/{file_path}"
            if self.VITE_STATIC_URL
            else f"/{file_path}"
        )

        asset_tags.append(self.__script_tag(src=src, attrs={"type": "module"}))

        return "\n".join(asset_tags)

    def jinja2_env_import(self, env: Environment):
        imports = [
            {"name": "vite_hmr_client", "func": self.vite_hmr_client},
            {"name": "vite_asset", "func": self.vite_asset},
        ]

        for _import in imports:
            env.globals[_import["name"]] = _import["func"]

    def __css_assets_handle(self, asset_path: str, processed: List[str]):
        stylesheet_tags = []

        entrypoint = self._manifest[asset_path]

        for import_ in entrypoint.get("imports", []):
            stylesheet_tags.extend(self.__css_assets_handle(import_, processed))

        for css_path in entrypoint.get("css", []):
            if css_path not in processed:
                stylesheet_tags.append(self.__link_stylesheet_tag(css_path))

                processed.append(css_path)

        return stylesheet_tags

    def __script_tag(self, src: str, attrs: dict = None):
        attrs_str = (
            " ".join([f"{key}={value}" for key, value in attrs.items()])
            if attrs is not None
            else ""
        )

        return f'<script {attrs_str} src="{src}"></script>'

    def __link_stylesheet_tag(self, file_path: str):
        href = (
            f"{self.VITE_STATIC_URL}/{file_path}"
            if self.VITE_STATIC_URL
            else f"/{file_path}"
        )

        return '<link rel="stylesheet" href="{href}" />'.format(href=href)
