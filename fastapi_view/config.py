from dataclasses import dataclass
from pathlib import Path


@dataclass
class InertiaConfig:
    assets_version: str = ""
    vite_config: "ViteConfig" | None = None


@dataclass
class ViteConfig:
    # development mode.
    dev_mode: bool = False

    # Vite dev server protocol (http / https)
    dev_server_protocol: str = "http"

    # Vite dev server hostname.
    dev_server_host: str = "localhost"

    # Vite dev server port.
    dev_server_port: int = 5173

    # Vite dev server path to hot module replacement.
    ws_client_path: str = "@vite/client"

    # Path to your manifest file generated by Vite.
    manifest_path: str | Path = "dist/.vite/manifest.json"

    # Path to vite compiled assets (only used in production mode).
    dist_path: Path = "dist"

    # URI to vite compiled assets (only used in production mode).
    dist_uri_prefix: str | None = None

    # Vite static asset url
    static_url: str | None = None

    def __post_init__(self):
        if not self.dev_mode:
            if not self.static_url and not self.dist_uri_prefix:
                raise ValueError(
                    "static_url or dist_uri_prefix must be set in production mode"
                )

        if self.dist_uri_prefix is not None and not self.dist_uri_prefix:
            raise ValueError("dist_uri_prefix must be a non-empty string")

    @property
    def dev_server_url(self) -> str:
        return "{protocol}://{host}:{port}".format(
            protocol=self.dev_server_protocol,
            host=self.dev_server_host,
            port=self.dev_server_port,
        )

    @property
    def dev_websocket_url(self) -> str:
        return "{dev_server_url}/{ws_client_path}".format(
            dev_server_url=self.dev_server_url,
            ws_client_path=self.ws_client_path,
        )
