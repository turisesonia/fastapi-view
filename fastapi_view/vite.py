import json
import os

from pydantic import computed_field
from pydantic_settings import BaseSettings, SettingsConfigDict

from .view import ViewLoader


class _ViteSettings(BaseSettings):
    """Vite helping function for Jinja2"""

    # development or production mode.
    VITE_DEV_MODE: bool = False

    # Vite dev server protocol (http / https)
    VITE_DEV_SERVER_PROTOCOL: str = "http"

    # Vite dev server hostname.
    VITE_DEV_SERVER_HOST: str = "localhost"

    # Vite dev server port.
    VITE_DEV_SERVER_PORT: int = 5173

    VITE_DEV_SERVER_URL: str = "{protocol}://{server_host}:{server_port}".format(
        protocol=VITE_DEV_SERVER_PROTOCOL,
        server_host=VITE_DEV_SERVER_HOST,
        server_port=VITE_DEV_SERVER_PORT,
    )

    # Vite dev server path to hot module replacement.
    VITE_WS_CLIENT_PATH: str = "@vite/client"

    # Path to vite compiled assets (only used in production mode).
    VITE_ASSETS_PATH: str | None = None

    # Vite static asset url
    VITE_STATIC_URL: str | None = None

    # Path to your manifest file generated by Vite.
    VITE_MANIFEST_PATH: str = "{root}/dist/manifest.json".format(
        root=os.path.abspath("")
    )

    @computed_field
    def dev_server_url(self) -> str:
        return "{protocol}://{server_host}:{server_port}".format(
            protocol=self.VITE_DEV_SERVER_PROTOCOL,
            server_host=self.VITE_DEV_SERVER_HOST,
            server_port=self.VITE_DEV_SERVER_PORT,
        )

    @computed_field
    def dev_websocket_url(self) -> str:
        return "{dev_server_url}/{ws_client_path}".format(
            dev_server_url=self.dev_server_url,
            ws_client_path=self.VITE_WS_CLIENT_PATH,
        )

    @computed_field
    def dev_assets_url(self, asset_path: str) -> str:
        return "{dev_server_url}/{asset_path}".format(
            dev_server_url=self.dev_server_url,
            asset_path=asset_path,
        )

    model_config = SettingsConfigDict(
        env_file=".env", env_file_encoding="utf-8", extra="ignore"
    )


class Vite:
    _instance: "Vite" = None
    _manifest: dict = None

    def __new__(cls):
        """Singleton pattern"""

        if cls._instance is not None:
            return cls._instance

        cls._instance = super().__new__(cls)

        return cls._instance

    def __init__(self):
        self.settings = _ViteSettings()

    def vite_hmr_client(self) -> str:
        if not self.settings.VITE_DEV_MODE:
            return ""

        return self._script_tag(
            src=self.settings.dev_websocket_url,
            attrs={"type": "module"},
        )

    def vite_asset(self, asset_path: str):
        if self.VITE_DEV_MODE:
            return self._script_tag(
                src=self.settings.dev_assets_url(asset_path),
                attrs={"type": "module"},
            )

        self._load_manifest()

        asset_tags = [tag for tag in self._css_assets_handle(asset_path, [])]
        file_path = self._manifest[asset_path]["file"]
        src = (
            f"{self.settings.VITE_STATIC_URL}/{file_path}"
            if self.settings.VITE_STATIC_URL
            else f"/{file_path}"
        )

        asset_tags.append(self._script_tag(src=src, attrs={"type": "module"}))

        return "\n".join(asset_tags)

    def _load_manifest(self):
        if self._manifest is None:
            with open(self.settings.VITE_MANIFEST_PATH) as f:
                self._manifest = json.load(f)

    def _css_assets_handle(self, asset_path: str, processed: list[str]):
        stylesheet_tags = []

        entrypoint = self._manifest[asset_path]

        for import_ in entrypoint.get("imports", []):
            stylesheet_tags.extend(self._css_assets_handle(import_, processed))

        for css_path in entrypoint.get("css", []):
            if css_path not in processed:
                stylesheet_tags.append(self._link_tag(css_path))

                processed.append(css_path)

        yield from stylesheet_tags

    def _script_tag(self, src: str, attrs: dict = None):
        attrs_str = (
            " ".join(f"{key}={value}" for key, value in attrs.items())
            if isinstance(attrs, dict)
            else ""
        )

        return f'<script {attrs_str} src="{src}"></script>'

    def _link_tag(self, file_path: str):
        href = (
            f"{self.VITE_STATIC_URL}/{file_path}"
            if self.VITE_STATIC_URL
            else f"/{file_path}"
        )

        return '<link rel="stylesheet" href="{href}" />'.format(href=href)


def init_vite():
    vite = Vite()
    templates = ViewLoader()._templates

    templates.env.globals["vite_hmr_client"] = vite.vite_hmr_client
    templates.env.globals["vite_asset"] = vite.vite_asset
